#!/usr/bin/env python3
"""
Generate test vectors for cryptographic functions
Creates C header files with NIST test vectors and additional test cases
"""

import hashlib
import struct
from Crypto.Cipher import AES
from Crypto.Hash import HMAC, SHA256

def generate_aes_vectors():
    """Generate AES test vectors"""
    vectors = []
    
    # NIST SP 800-38A test vectors
    test_cases = [
        {
            'key': bytes.fromhex('2b7e151628aed2a6abf7158809cf4f3c'),
            'keysize': 128,
            'plaintext': bytes.fromhex('6bc1bee22e409f96e93d7e117393172a'),
            'ciphertext': bytes.fromhex('3ad77bb40d7a3660a89ecaf32466ef97')
        },
        {
            'key': bytes.fromhex('8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b'),
            'keysize': 192,
            'plaintext': bytes.fromhex('6bc1bee22e409f96e93d7e117393172a'),
            'ciphertext': bytes.fromhex('bd334f1d6e45f25ff712a214571fa5cc')
        },
        {
            'key': bytes.fromhex('603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4'),
            'keysize': 256,
            'plaintext': bytes.fromhex('6bc1bee22e409f96e93d7e117393172a'),
            'ciphertext': bytes.fromhex('f3eed1bdb5d2a03c064b5a7e3db181f8')
        }
    ]
    
    for case in test_cases:
        vectors.append({
            'name': f"AES{case['keysize']}_ECB",
            'key': case['key'].hex(),
            'keysize': case['keysize'],
            'plaintext': case['plaintext'].hex(),
            'ciphertext': case['ciphertext'].hex()
        })
    
    return vectors

def generate_sha256_vectors():
    """Generate SHA-256 test vectors"""
    vectors = []
    
    # NIST test vectors
    test_cases = [
        b"",
        b"abc",
        b"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        b"a" * 55,
        b"a" * 56,
        b"a" * 1000000
    ]
    
    for i, message in enumerate(test_cases):
        hash_obj = hashlib.sha256()
        hash_obj.update(message)
        digest = hash_obj.hexdigest()
        
        vectors.append({
            'name': f"SHA256_TEST_{i}",
            'message': message.hex() if len(message) < 1000 else f"'a' repeated {len(message)} times",
            'message_len': len(message),
            'digest': digest
        })
    
    return vectors

def generate_hmac_vectors():
    """Generate HMAC-SHA256 test vectors"""
    vectors = []
    
    # RFC 4231 test vectors
    test_cases = [
        {
            'key': b'\x0b' * 20,
            'data': b"Hi There",
            'name': "HMAC_TEST_1"
        },
        {
            'key': b"Jefe",
            'data': b"what do ya want for nothing?",
            'name': "HMAC_TEST_2"
        },
        {
            'key': b'\xaa' * 20,
            'data': b'\xdd' * 50,
            'name': "HMAC_TEST_3"
        }
    ]
    
    for case in test_cases:
        h = HMAC.new(case['key'], case['data'], SHA256)
        vectors.append({
            'name': case['name'],
            'key': case['key'].hex(),
            'key_len': len(case['key']),
            'data': case['data'].hex(),
            'data_len': len(case['data']),
            'mac': h.hexdigest()
        })
    
    return vectors

def generate_header_file():
    """Generate C header file with all test vectors"""
    aes_vectors = generate_aes_vectors()
    sha256_vectors = generate_sha256_vectors()
    hmac_vectors = generate_hmac_vectors()
    
    header = """/*
 * Generated test vectors for ArmAsm-CryptoEngine
 * DO NOT EDIT - Generated by scripts/test_vectors.py
 */

#ifndef TEST_VECTORS_H
#define TEST_VECTORS_H

#include <stdint.h>
#include <stddef.h>

/* AES Test Vectors */
typedef struct {
    const char* name;
    const char* key;
    size_t keysize;
    const char* plaintext;
    const char* ciphertext;
} aes_test_vector_t;

"""
    
    # AES vectors
    header += f"#define AES_TEST_VECTOR_COUNT {len(aes_vectors)}\n"
    header += "static const aes_test_vector_t aes_test_vectors[] = {\n"
    
    for vector in aes_vectors:
        header += f'    {{"{vector["name"]}", "{vector["key"]}", {vector["keysize"]}, "{vector["plaintext"]}", "{vector["ciphertext"]}"}},\n'
    
    header += "};\n\n"
    
    # SHA-256 vectors
    header += """/* SHA-256 Test Vectors */
typedef struct {
    const char* name;
    const char* message;
    size_t message_len;
    const char* digest;
} sha256_test_vector_t;

"""
    
    header += f"#define SHA256_TEST_VECTOR_COUNT {len(sha256_vectors)}\n"
    header += "static const sha256_test_vector_t sha256_test_vectors[] = {\n"
    
    for vector in sha256_vectors:
        if isinstance(vector['message'], str) and 'repeated' in vector['message']:
            header += f'    {{"{vector["name"]}", NULL, {vector["message_len"]}, "{vector["digest"]}"}},  // {vector["message"]}\n'
        else:
            header += f'    {{"{vector["name"]}", "{vector["message"]}", {vector["message_len"]}, "{vector["digest"]}"}},\n'
    
    header += "};\n\n"
    
    # HMAC vectors
    header += """/* HMAC-SHA256 Test Vectors */
typedef struct {
    const char* name;
    const char* key;
    size_t key_len;
    const char* data;
    size_t data_len;
    const char* mac;
} hmac_test_vector_t;

"""
    
    header += f"#define HMAC_TEST_VECTOR_COUNT {len(hmac_vectors)}\n"
    header += "static const hmac_test_vector_t hmac_test_vectors[] = {\n"
    
    for vector in hmac_vectors:
        header += f'    {{"{vector["name"]}", "{vector["key"]}", {vector["key_len"]}, "{vector["data"]}", {vector["data_len"]}, "{vector["mac"]}"}},\n'
    
    header += "};\n\n#endif /* TEST_VECTORS_H */\n"
    
    return header

def main():
    """Main function"""
    header_content = generate_header_file()
    
    # Write to file or stdout
    output_file = "tests/vectors/generated_vectors.h"
    try:
        with open(output_file, 'w') as f:
            f.write(header_content)
        print(f"Test vectors written to {output_file}")
    except IOError:
        print(header_content)

if __name__ == "__main__":
    main()
